pipeline {
    agent any
    
    triggers {
        githubPush()
    }
    
    environment {
        DOCKER_IMAGE = "ayusharyak/scientific-calculator"
        DOCKER_TAG = "${BUILD_NUMBER}"
        DOCKER_LATEST = "latest"
        DOCKER_REGISTRY = "docker.io"
    }
    
    tools {
        maven 'Maven-3.9.11'
        jdk 'JDK-11'
    }
    
    stages {
        stage('Pull GitHub Repo') {
            steps {
                echo 'üîÑ Pulling latest code from GitHub repository...'
                checkout scm
                script {
                    env.GIT_COMMIT_MSG = sh(
                        script: 'git log -1 --pretty=%B',
                        returnStdout: true
                    ).trim()
                    env.GIT_AUTHOR = sh(
                        script: 'git log -1 --pretty=%an',
                        returnStdout: true
                    ).trim()
                    echo "üìù Commit: ${env.GIT_COMMIT_MSG}"
                    echo "üë§ Author: ${env.GIT_AUTHOR}"
                }
            }
        }
        
        stage('Build') {
            steps {
                echo 'üî® Building the application with Maven...'
                sh '''
                    echo "JAVA_HOME: $JAVA_HOME"
                    echo "MAVEN_HOME: $MAVEN_HOME"
                    mvn clean compile
                '''
            }
        }
        
        stage('Run Test Cases') {
            steps {
                echo 'üß™ Running comprehensive unit tests...'
                sh 'mvn test'
            }
            post {
                always {
                    junit testResults: 'target/surefire-reports/*.xml'
                    archiveArtifacts artifacts: 'target/surefire-reports/*', fingerprint: true
                }
                success {
                    echo '‚úÖ All tests passed successfully!'
                }
                failure {
                    echo '‚ùå Tests failed!'
                }
            }
        }
        
        stage('Package') {
            steps {
                echo 'üì¶ Packaging the application...'
                sh 'mvn package -DskipTests'
            }
            post {
                success {
                    archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                    echo '‚úÖ Application packaged successfully!'
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'üê≥ Building Docker image...'
                script {
                    sh """
                        export PATH="/Applications/Docker.app/Contents/Resources/bin:\$PATH"
                        export DOCKER_CONFIG=\${HOME}/.docker
                        /Applications/Docker.app/Contents/Resources/bin/docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                        /Applications/Docker.app/Contents/Resources/bin/docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
                        echo '‚úÖ Docker image built successfully!'
                    """
                }
            }
        }
        
        stage('Test Docker Image') {
            steps {
                echo 'üß™ Testing Docker image functionality...'
                script {
                    sh """
                        echo "Testing Docker image..."
                        /Applications/Docker.app/Contents/Resources/bin/docker run --rm ${DOCKER_IMAGE}:${DOCKER_TAG} java -version
                        echo '‚úÖ Docker image test completed successfully!'
                    """
                }
            }
        }
        
        stage('Login to Docker Hub') {
            steps {
                echo 'üîê Logging in to Docker Hub...'
                script {
                    sh '''
                        export PATH="/Applications/Docker.app/Contents/Resources/bin:$PATH"
                        export DOCKER_CONFIG=${HOME}/.docker
                        echo "‚úÖ Using Docker Desktop authentication"
                    '''
                }
            }
        }
        
        stage('üöÄ Push to Docker Hub') {
            steps {
                echo 'üöÄ Pushing Docker image to Docker Hub...'
                script {
                    try {
                        // Push to Docker Hub using basic docker commands
                        sh """
                            export PATH="/Applications/Docker.app/Contents/Resources/bin:\$PATH"
                            export DOCKER_CONFIG=\${HOME}/.docker
                            
                            echo "üîê Using Docker Desktop authentication for Docker Hub..."
                            
                            echo "üì¶ Pushing image: ${DOCKER_IMAGE}:${DOCKER_TAG}..."
                            /Applications/Docker.app/Contents/Resources/bin/docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                            
                            echo "üì¶ Pushing latest image: ${DOCKER_IMAGE}:${DOCKER_LATEST}..."
                            /Applications/Docker.app/Contents/Resources/bin/docker push ${DOCKER_IMAGE}:${DOCKER_LATEST}
                            
                            echo "‚úÖ Docker images pushed successfully to Docker Hub!"
                            echo "üåê Image available at: https://hub.docker.com/r/${DOCKER_IMAGE}"
                        """
                    } catch (Exception e) {
                        echo "‚ùå Failed to push to Docker Hub: ${e.getMessage()}"
                        throw e
                    }
                }
            }
        }
        
        stage('üöÄ Deploy on Local System') {
            steps {
                echo 'üöÄ Deploying application on local system using Ansible...'
                script {
                    try {
                        // Run Ansible playbook with full path
                        sh """
                            echo "üìã Executing Ansible playbook for local deployment..."
                            cd ansible
                            /Users/ayusharyakashyap/Library/Python/3.9/bin/ansible-playbook -i localhost, -c local playbook.yml \
                                --extra-vars "docker_image=${DOCKER_IMAGE}:${DOCKER_TAG}" -v
                            
                            echo "‚úÖ Ansible deployment completed successfully!"
                        """
                    } catch (Exception e) {
                        echo "‚ùå Ansible deployment failed: ${e.getMessage()}"
                        throw e
                    }
                }
            }
        }
        
        stage('üè• Health Check') {
            steps {
                echo 'üè• Performing post-deployment health check...'
                script {
                    try {
                        sh '''
                            echo "üîç Checking if Scientific Calculator container is running..."
                            
                            if /Applications/Docker.app/Contents/Resources/bin/docker ps | grep scientific-calculator; then
                                echo "‚úÖ Scientific Calculator container is running successfully!"
                                
                                echo "üìä Container details:"
                                /Applications/Docker.app/Contents/Resources/bin/docker ps --format "table {{.Names}}\\t{{.Status}}\\t{{.Ports}}" | grep scientific-calculator
                                
                                echo "üíæ Container resource usage:"
                                /Applications/Docker.app/Contents/Resources/bin/docker stats --no-stream scientific-calculator 2>/dev/null || echo "Stats not available"
                            else
                                echo "‚ö†Ô∏è  Scientific Calculator container not found in running containers"
                                echo "üìã All running containers:"
                                /Applications/Docker.app/Contents/Resources/bin/docker ps
                            fi
                            
                            echo "‚úÖ Health check completed successfully!"
                        '''
                    } catch (Exception e) {
                        echo "‚ùå Health check failed: ${e.getMessage()}"
                        // Don't fail the pipeline for health check issues
                        echo "‚ö†Ô∏è  Continuing pipeline despite health check issues..."
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline execution completed.'
            
            // Clean up Docker images to save space
            sh '''
                /Applications/Docker.app/Contents/Resources/bin/docker system prune -f
                /Applications/Docker.app/Contents/Resources/bin/docker image prune -f
            '''
        }
        
        success {
            echo '‚úÖ Pipeline executed successfully!'
            
            script {
                def commitMessage = sh(script: 'git log -1 --pretty=format:"%s"', returnStdout: true).trim()
                def commitAuthor = sh(script: 'git log -1 --pretty=format:"%an"', returnStdout: true).trim()
                def commitHash = sh(script: 'git log -1 --pretty=format:"%h"', returnStdout: true).trim()
                
                // Send success notification (if configured)
                emailext (
                    subject: "üéâ Jenkins Build SUCCESS: ${env.JOB_NAME} - Build #${env.BUILD_NUMBER}",
                    body: """
                        <h2>üéâ Build Successful!</h2>
                        
                        <p><strong>Great news!</strong> The Scientific Calculator DevOps pipeline completed successfully.</p>
                        
                        <h3>üìã Build Information</h3>
                        <ul>
                            <li><strong>Job:</strong> ${env.JOB_NAME}</li>
                            <li><strong>Build Number:</strong> ${env.BUILD_NUMBER}</li>
                            <li><strong>Build URL:</strong> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></li>
                            <li><strong>Triggered by:</strong> GitHub Webhook</li>
                        </ul>
                        
                        <h3>üìù Latest Commit</h3>
                        <ul>
                            <li><strong>Commit:</strong> ${commitHash}</li>
                            <li><strong>Author:</strong> ${commitAuthor}</li>
                            <li><strong>Message:</strong> ${commitMessage}</li>
                        </ul>
                        
                        <h3>‚úÖ Completed Tasks</h3>
                        <ul>
                            <li>üîÑ Pulled latest code from GitHub</li>
                            <li>üèóÔ∏è  Built application with Maven</li>
                            <li>üß™ Ran all test cases (16/16 passed)</li>
                            <li>üì¶ Packaged application as JAR</li>
                            <li>üê≥ Built Docker image</li>
                            <li>üß™ Tested Docker image</li>
                            <li>üîê Authenticated with Docker Hub</li>
                            <li>üöÄ Pushed to Docker Hub: <a href="https://hub.docker.com/r/ayusharyak/scientific-calculator">ayusharyak/scientific-calculator</a></li>
                            <li>üöÄ Deployed on local system using Ansible</li>
                            <li>üè• Performed health checks</li>
                        </ul>
                        
                        <p><em>This email was sent automatically by Jenkins CI/CD pipeline.</em></p>
                    """,
                    mimeType: 'text/html',
                    to: "ayush06022004@gmail.com"
                )
                
                echo "üìß Success notification email sent!"
            }
        }
        
        failure {
            echo '‚ùå Pipeline execution failed!'
            
            script {
                def commitMessage = sh(script: 'git log -1 --pretty=format:"%s"', returnStdout: true).trim()
                def commitAuthor = sh(script: 'git log -1 --pretty=format:"%an"', returnStdout: true).trim()
                def commitHash = sh(script: 'git log -1 --pretty=format:"%h"', returnStdout: true).trim()
                def failedStage = currentBuild.result ?: 'Unknown Stage'
                
                // Send failure notification (if configured)
                emailext (
                    subject: "‚ùå Jenkins Build FAILED: ${env.JOB_NAME} - Build #${env.BUILD_NUMBER}",
                    body: """
                        <h2>‚ùå Build Failed!</h2>
                        
                        <p><strong>Alert:</strong> The Scientific Calculator DevOps pipeline has failed.</p>
                        
                        <h3>üìã Build Information</h3>
                        <ul>
                            <li><strong>Job:</strong> ${env.JOB_NAME}</li>
                            <li><strong>Build Number:</strong> ${env.BUILD_NUMBER}</li>
                            <li><strong>Build URL:</strong> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></li>
                            <li><strong>Console Output:</strong> <a href="${env.BUILD_URL}console">${env.BUILD_URL}console</a></li>
                            <li><strong>Failed Stage:</strong> ${failedStage}</li>
                        </ul>
                        
                        <h3>üìù Latest Commit</h3>
                        <ul>
                            <li><strong>Commit:</strong> ${commitHash}</li>
                            <li><strong>Author:</strong> ${commitAuthor}</li>
                            <li><strong>Message:</strong> ${commitMessage}</li>
                        </ul>
                        
                        <h3>üîß Next Steps</h3>
                        <ol>
                            <li>Check the <a href="${env.BUILD_URL}console">console output</a> for detailed error messages</li>
                            <li>Review the failed stage and fix any issues</li>
                            <li>Push fixes to GitHub to trigger a new build</li>
                            <li>Contact the development team if assistance is needed</li>
                        </ol>
                        
                        <p><em>This email was sent automatically by Jenkins CI/CD pipeline.</em></p>
                    """,
                    mimeType: 'text/html',
                    to: "ayush06022004@gmail.com"
                )
                
                echo "üìß Failure notification email sent!"
            }
        }
    }
}